/*
 * Copyright 2020 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#define PASS 1
#define FAIL 0
#define ITM(x) x, sizeof(x)

struct ecdsa_keygen_st {
    const char *curve_name;
};

struct ecdsa_pub_verify_st {
    const char *curve_name;
    const unsigned char *pub;
    size_t pub_len;
    int pass;
};

struct ecdsa_siggen_st {
    const char *digest_alg;
    const char *curve_name;
    const unsigned char *msg;
    size_t msg_len;
};

struct ecdsa_sigver_st {
    const char *digest_alg;
    const char *curve_name;
    const unsigned char *msg;
    size_t msg_len;
    const unsigned char *pub;
    size_t pub_len;
    const unsigned char *r;
    size_t r_len;
    const unsigned char *s;
    size_t s_len;
    int pass;
};

static const struct ecdsa_keygen_st ecdsa_keygen_data[] = {
    { "P-224" },
};

static const unsigned char ecdsa_pv_pub0[] = {
    POINT_CONVERSION_UNCOMPRESSED,
    0x50, 0x0F, 0x05, 0x86, 0xD3, 0xAA, 0x8A, 0x48,
    0x46, 0x63, 0x0D, 0xD7, 0xC7, 0x5D, 0x5F, 0x1D,
    0xB2, 0xA7, 0x9B, 0xE8, 0xC8, 0xBB, 0xBE, 0x2C,
    0x93, 0x33, 0xDC, 0xCB, 0xBB, 0x2F, 0xB3, 0xCF,
    0x55, 0x88, 0x7A, 0x97, 0xD1, 0x75, 0x73, 0xFE,
    0x92, 0x02, 0x5C, 0xC8, 0xE3, 0xF4, 0x35, 0x4B,
    0x08, 0x7E, 0xF4, 0xD3, 0x7D, 0x86, 0x06, 0x92,
    0xBA, 0x15, 0x3F, 0xCF, 0x0C, 0xC4, 0xBF, 0xBC,
};
static const unsigned char ecdsa_pv_pub1[] = {
    POINT_CONVERSION_UNCOMPRESSED,
    0x1F, 0x74, 0xD6, 0x99, 0xEB, 0x1D, 0x4F, 0x26,
    0x25, 0x5E, 0xD4, 0x6A, 0xA6, 0xD5, 0x23, 0xB3,
    0xF5, 0x5D, 0x14, 0x38, 0xE0, 0x4D, 0x23, 0x7F,
    0x9A, 0xE5, 0xB7, 0x1B, 0xF9, 0x7F, 0xAD, 0x7E,
    0x0E, 0x1C, 0x06, 0xF4, 0x20, 0xF3, 0x8E, 0x93,
    0x79, 0x11, 0x15, 0xD6, 0x82, 0x12, 0x14, 0xC2,
    0xF9, 0x30, 0x61, 0x9A, 0xC3, 0x12, 0xE3, 0x88,
    0x4E, 0xB1, 0x1A, 0x4B, 0x54, 0x6D, 0xEA, 0xCF,
};
static const struct ecdsa_pub_verify_st ecdsa_pv_data[] = {
    {
        "P-256",
        ITM(ecdsa_pv_pub0),
        PASS
    },
    {
        "P-256",
        ITM(ecdsa_pv_pub1),
        FAIL
    },
};

static const unsigned char ecdsa_siggen_msg0[] = {
    0xB8, 0x65, 0x55, 0x9D, 0x54, 0x5C, 0xD2, 0xC7,
    0xC2, 0xCA, 0x96, 0xDF, 0xF3, 0x9B, 0x26, 0xED,
    0xF8, 0x16, 0x99, 0x05, 0x94, 0xA9, 0x3F, 0x69,
    0x5F, 0xE8, 0x73, 0xC5, 0xFE, 0x78, 0x28, 0x84,
    0xC0, 0xA7, 0xFA, 0x29, 0xBE, 0x37, 0x82, 0xC0,
    0x56, 0x41, 0x49, 0xAF, 0xF3, 0x59, 0xBB, 0x96,
    0xF6, 0x4B, 0x87, 0x45, 0xAB, 0x1F, 0xB2, 0xB3,
    0x8F, 0x14, 0xD4, 0xD7, 0x1C, 0x29, 0x08, 0x0C,
    0x79, 0x8A, 0x38, 0xAE, 0x32, 0x1C, 0x38, 0x80,
    0x5B, 0x45, 0x25, 0x46, 0x5D, 0xCE, 0x7D, 0x34,
    0xC0, 0x90, 0xEF, 0x06, 0x84, 0xA1, 0x0F, 0xF8,
    0x56, 0x2D, 0x46, 0xF7, 0xB7, 0xDE, 0x06, 0x7C,
    0x87, 0xA6, 0x7E, 0x71, 0x8D, 0x7B, 0x27, 0xE5,
    0x51, 0x0C, 0xE7, 0xBA, 0x18, 0x08, 0xE0, 0xD5,
    0x0B, 0x8C, 0xB6, 0x22, 0xA5, 0x8F, 0xB3, 0xF7,
    0xFB, 0xC6, 0x2A, 0x59, 0x02, 0x8A, 0x8C, 0x42,
};
static const struct ecdsa_siggen_st ecdsa_siggen_data[] = {
     {
        "SHA2-256",
        "P-384",
        ITM(ecdsa_siggen_msg0),
     },
};

static const unsigned char ecdsa_sigver_msg0[] = {
    0x0b, 0x00, 0xc4, 0x3f, 0xb9, 0xcb, 0x92, 0xd3,
    0x56, 0x83, 0xc6, 0x97, 0x23, 0xf8, 0xf1, 0x0b,
    0x0a, 0xa6, 0x60, 0xca, 0x3a, 0xed, 0xba, 0x38,
    0xf7, 0x86, 0xc2, 0x6d, 0xa1, 0xb6, 0x40, 0x2c,
    0x92, 0xfe, 0x44, 0x1a, 0x19, 0x61, 0x5c, 0x02,
    0xfa, 0xd3, 0x79, 0x99, 0xb8, 0x99, 0xe8, 0x70,
    0xaa, 0x26, 0x01, 0xf2, 0xe7, 0xdc, 0x69, 0xce,
    0x9a, 0xd2, 0xaa, 0x02, 0x15, 0xab, 0x0d, 0xcb,
    0x77, 0xaf, 0xe0, 0x81, 0x6d, 0x92, 0x6e, 0x09,
    0xcd, 0x93, 0xd6, 0x22, 0x67, 0xc2, 0xd3, 0x7c,
    0x58, 0x11, 0xc8, 0x77, 0x4e, 0x97, 0x92, 0x87,
    0xcd, 0xe4, 0xc9, 0x2a, 0x77, 0xb2, 0xf0, 0xe7,
    0xd3, 0x5a, 0x20, 0x36, 0x91, 0x75, 0x23, 0xa8,
    0xcb, 0x4a, 0xd0, 0xe5, 0x95, 0x3b, 0x24, 0x2a,
    0x86, 0xa0, 0xaa, 0xbe, 0xac, 0x59, 0xd7, 0xd0,
    0xfb, 0xdf, 0x33, 0xc9, 0x73, 0xaf, 0x8a, 0x06,
};
static const unsigned char ecdsa_sigver_msg1[] = {
    0x45, 0xBB, 0x9D, 0xDC, 0x1D, 0x0A, 0xF2, 0xD7,
    0x56, 0x07, 0x1F, 0x47, 0x2A, 0x17, 0xCE, 0x38,
    0xA8, 0x7E, 0x75, 0xED, 0x4F, 0xE4, 0x17, 0x65,
    0x11, 0x69, 0xDF, 0x04, 0xF0, 0x39, 0x28, 0xD0,
    0x75, 0xD5, 0xF0, 0x1C, 0x32, 0x84, 0x16, 0x74,
    0x7D, 0x61, 0x57, 0xDB, 0x92, 0x24, 0x60, 0xBA,
    0x58, 0x7B, 0x48, 0xB4, 0x44, 0xFB, 0xD7, 0x35,
    0xD7, 0xCF, 0x61, 0x34, 0x7F, 0x70, 0x38, 0xAE,
    0xE2, 0xB2, 0x6C, 0x8A, 0xD1, 0x27, 0xB4, 0xF0,
    0x33, 0xB9, 0xE9, 0x27, 0x1A, 0xEE, 0x34, 0x72,
    0x9D, 0x5E, 0x74, 0x28, 0xE7, 0x0B, 0x82, 0xE1,
    0x60, 0xC2, 0x43, 0xE6, 0x75, 0x4A, 0x2E, 0x66,
    0x88, 0x72, 0xCA, 0xC7, 0x97, 0xFE, 0x19, 0xCD,
    0xA4, 0x30, 0xBF, 0xC7, 0xDC, 0x37, 0xF8, 0x1B,
    0xB6, 0xD7, 0x7E, 0xAD, 0xD6, 0xC1, 0x20, 0xAC,
    0x79, 0x03, 0x89, 0xEA, 0xF4, 0x59, 0x21, 0xF2,
};

static const unsigned char ecdsa_sigver_pub0[] = {
    POINT_CONVERSION_UNCOMPRESSED,
    0x2c, 0xdf, 0x6f, 0x23, 0x3d, 0x73, 0x86, 0x25,
    0x1a, 0x29, 0xd6, 0xde, 0x98, 0xcf, 0x85, 0xf7,
    0x6a, 0x55, 0xba, 0xdb, 0x0f, 0x35, 0x94, 0x92,
    0xb3, 0x58, 0xf3, 0x89, 0x7f, 0x6c, 0x22, 0x10,
    0xd9, 0xd3, 0x54, 0xd2, 0x74, 0x9f, 0x64, 0x0d,
    0xd2, 0xf8, 0x3e, 0xfc, 0x7f, 0xb7, 0x16, 0x36,
};
static const unsigned char ecdsa_sigver_pub1[] = {
    POINT_CONVERSION_UNCOMPRESSED,
    0x00, 0xD4, 0x79, 0x9F, 0xD9, 0x99, 0xEC, 0x21,
    0x1E, 0xE6, 0x06, 0x58, 0xB7, 0xFB, 0x76, 0xFC,
    0xF5, 0x9A, 0xE1, 0x1E, 0x5A, 0x87, 0xD7, 0x0E,
    0x21, 0x7B, 0xDE, 0x21, 0x52, 0xE6, 0xE4, 0x09,
    0x2C, 0xB8, 0x5D, 0x99, 0xE2, 0x6A, 0xB1, 0xE5,
    0x79, 0x11, 0x49, 0xBD, 0x3D, 0xC7, 0x1C, 0x48,
    0xF5, 0x83, 0xFC, 0x9E, 0xF3, 0xAB, 0x2D, 0x30,
    0x64, 0xEC, 0x22, 0xCB, 0xEB, 0x95, 0xBF, 0xF2,
    0x2D, 0xCE,

    0x01, 0xB9, 0xFE, 0xBD, 0x4C, 0x4B, 0xDA, 0x1F,
    0x30, 0xC3, 0x5C, 0x0F, 0x5D, 0x3E, 0x36, 0x51,
    0xF2, 0xC0, 0xF7, 0xFC, 0x79, 0x25, 0x98, 0xF2,
    0x4B, 0x2B, 0x61, 0xFC, 0xD9, 0xC4, 0x5C, 0xC0,
    0x13, 0xA2, 0x4F, 0x2E, 0x34, 0xD4, 0x15, 0xC4,
    0x25, 0x13, 0xA9, 0x30, 0x35, 0x56, 0xB7, 0xCD,
    0xD0, 0xC4, 0x65, 0x5D, 0xFB, 0xB2, 0xE4, 0xBF,
    0x22, 0x67, 0xEF, 0xA1, 0x2E, 0xA2, 0x1B, 0x33,
    0xE4, 0x3D,
};
static const unsigned char ecdsa_sigver_r0[] = {
    0x6b, 0x35, 0x62, 0x67, 0xa3, 0xbd, 0x76, 0xc8,
    0xa3, 0xdc, 0x93, 0x18, 0x82, 0x6f, 0xd2, 0x43,
    0x52, 0x18, 0x93, 0x21, 0x8e, 0xce, 0x12, 0x65,
};
static const unsigned char ecdsa_sigver_r1[] = {
    0x01, 0xBF, 0xA6, 0x46, 0x6D, 0x4E, 0x1C, 0x42,
    0x18, 0x7D, 0x46, 0xC6, 0x5F, 0xA5, 0x05, 0xEA,
    0x1A, 0xEF, 0xDB, 0x46, 0xD1, 0x79, 0x3F, 0x2B,
    0xE2, 0x70, 0x0F, 0x14, 0x26, 0x30, 0x7F, 0x2D,
    0x1A, 0x41, 0xFD, 0x11, 0xC0, 0xBB, 0xD0, 0xD5,
    0x09, 0xAA, 0xE0, 0x1A, 0xFE, 0x59, 0x23, 0x7D,
    0x1B, 0x5C, 0xB9, 0x51, 0xCD, 0x3A, 0xA1, 0x32,
    0xC6, 0x92, 0xB0, 0x7D, 0x91, 0xC6, 0x30, 0xC0,
    0xA4, 0x2A,
};
static const unsigned char ecdsa_sigver_s0[] = {
    0x7b, 0x92, 0x4a, 0x13, 0x8d, 0x74, 0x87, 0xb2,
    0xd4, 0xc7, 0x21, 0x73, 0x2c, 0x8a, 0x09, 0x25,
    0xac, 0x19, 0xcf, 0x9c, 0xbc, 0xd7, 0x7b, 0xf8,
};
static const unsigned char ecdsa_sigver_s1[] = {
    0x00, 0x8D, 0x56, 0xBA, 0x60, 0x38, 0x23, 0x47,
    0xB8, 0x32, 0x73, 0x29, 0x40, 0x84, 0xF0, 0x2C,
    0x90, 0xB2, 0x1D, 0x56, 0xFF, 0x38, 0x68, 0xAA,
    0x42, 0xBA, 0x48, 0xA1, 0x52, 0x8C, 0xB4, 0xD6,
    0x15, 0xB7, 0x88, 0xB3, 0x71, 0xC6, 0x69, 0x60,
    0x6C, 0xEB, 0x4B, 0xF6, 0x19, 0x6A, 0x95, 0x8F,
    0x01, 0x09, 0xC6, 0x13, 0xE6, 0x17, 0x38, 0xC8,
    0x10, 0x49, 0x4F, 0x87, 0x43, 0x63, 0x62, 0x98,
    0xB1, 0xAC,
};


static const struct ecdsa_sigver_st ecdsa_sigver_data[] = {
    {
        "SHA-1",
        "P-192",
        ITM(ecdsa_sigver_msg0),
        ITM(ecdsa_sigver_pub0),
        ITM(ecdsa_sigver_r0),
        ITM(ecdsa_sigver_s0),
        PASS,
    },
    {
        "SHA2-512",
        "P-521",
        ITM(ecdsa_sigver_msg1),
        ITM(ecdsa_sigver_pub1),
        ITM(ecdsa_sigver_r1),
        ITM(ecdsa_sigver_s1),
        FAIL,
    },
};
